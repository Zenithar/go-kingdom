// Copyright (c) 2019 Thibault NORMAND <me@zenithar.org>.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package kingdom.realm.v1;

option (gogoproto.benchgen_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.unmarshaler_all) = true;
option csharp_namespace = "Kingdom.Realm.V1";
option go_package = "realmv1";
option java_multiple_files = true;
option java_outer_classname = "RealmApiProto";
option java_package = "org.zenithar.kingdom.realm.v1";
option objc_class_prefix = "KRX";
option php_namespace = "Kingdom\\Realm\\V1";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/lyft/protoc-gen-validate/validate/validate.proto";
import "google/protobuf/wrappers.proto";
import "pkg/protocol/kingdom/realm/v1/realm.proto";

// RealmAPI manage realm objects.
service RealmAPI {
  // Create a realm.
  rpc Create(RealmCreateRequest) returns (SingleRealmResponse);
  // Get a realm by id.
  rpc Get(RealmGetRequest) returns (SingleRealmResponse);
  // Update realm attributes.
  rpc Update(RealmUpdateRequest) returns (SingleRealmResponse);
  // Delete a realm by id.
  rpc Delete(RealmGetRequest) returns (SingleRealmResponse);
}

// -----------------------------------------------------------------------------

message RealmCreateRequest {
  string label = 1;
}

message RealmGetRequest {
  string id = 1;
}

message RealmUpdateRequest {
  string id = 1;
  google.protobuf.StringValue label = 2;
}

message SingleRealmResponse {
  Realm entity = 1;
}
